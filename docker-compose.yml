version: "3.7"
services:
  #   Order-db compose config
  postgres-order:
    container_name: postgres-order
    image: postgres:latest
    environment:
      POSTGRES_HOST: postgres-order
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_PORT: 5431
      #      POSTGRES_MULTIPLE_DATABASES: order_service_db,inver_service_db
      PGDATA: /data/postgres
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order_service_db
    volumes:
      - ./docker-postgresql-initdb2.sql:/docker-entrypoint-initdb.d/docker_postgres_init2.sql
    #      - ./postgres-order:/data/postgres
    expose:
      - "5431"
    ports:
      - "5431:5431"
    restart: always
    networks:
      - microservice

  #   Inventory-db compose config
  postgres-inventory:
    container_name: postgres-inventory
    image: postgres:latest
    environment:
      POSTGRES_HOST: postgres-inventory
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
      POSTGRES_PORT: 5432
      PGDATA: /data/postgres
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inver_service_db
    volumes:
      - ./docker-postgresql-initdb.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    #      - ./postgres-inventory:/data/postgres
    ports:
      - "5432:5432"
    restart: always
    networks:
      - microservice

  #    Mongo compose config
  mongo:
    container_name: mongo
    image: mongo:4.4.2
    restart: always
    ports:
      - "27017:27017"
    expose:
      - "27017"
    volumes:
      - ./mongo-data:/data/db
    networks:
      - microservice
    hostname: mongodb


  #      Keycloak compose config
  postgres-keycloak:
    container_name: keycloak-postgres
    image: postgres:latest
    volumes:
#      - ./psql_keycloak_data:/var/lib/psql
      - ./docker-postgresql-initdb3.sql:/docker-entrypoint-initdb.d/docker_postgres_init.sql
    environment:
      POSTGRES_DB: keycloak_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: root
        - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-keycloak:5430/keycloak_db
      PGDATA: /data/postgres
    expose:
      - "5430"
    ports:
      - "5430:5430"
    command: -p 5430
    networks:
      - microservice

  keycloak:
    container_name: keycloak
    image: quay.io/keycloak/keycloak:18.0.0
    command:
      - "start-dev"
      - "--import-realm"
    environment:
      DB_DATABASE: keycloak_db
      DB_PORT: 5430
      TCP_ADDR: postgres-keycloak
      DB_PASSWORD: root
      DB_USER: postgres
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8080:8080"
    volumes:
      - ./realms/:/opt/keycloak/data/import/
    depends_on:
      - postgres-keycloak
    networks:
      - microservice
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservice

  broker:
    image: confluentinc/cp-kafka:7.3.0
    container_name: broker
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    networks:
      - microservice

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - microservice

  #   Eureka Server compose config
  discovery-server:
    image: discovery-server:1.0-SNAPSHOT
    container_name: discovery-server
    hostname: discovery-server
    #    pull_policy: always
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
    networks:
      - microservice

  #   api gateway  compose config
  api-gateway:
    image: api-gateway:1.0-SNAPSHOT
    container_name: api-gateway
#    pull_policy: always
    ports:
      - "8181:8181"
    expose:
      - "8181"
    environment:
      - "plugins.security.disabled: true"
      - "opendistro_security.ssl.http.enabled: true"
      - "discovery.type=single-node"
      - "script.painless.regex.enabled=true"
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY=TRACE
    depends_on:
      - zipkin
      - discovery-server
      - keycloak
    networks:
      - microservice

    # Product-Service compose config
  product-service:
    container_name: product-service
    image: product-service:1.0-SNAPSHOT
    #    pull_policy: always
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    ports:
      - "8081:8081"
    depends_on:
      - mongo
      - discovery-server
      - api-gateway
    networks:
      - microservice

    # Order-Service compose config
  order-service:
    container_name: order-service
    #    pull_policy: always
    image: order-service:1.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5432/order_service_db
    ports:
      - "8083:8083"
    depends_on:
      - postgres-order
      - broker
      - zipkin
      - discovery-server
      - api-gateway
    networks:
      - microservice

  # Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    #    pull_policy: always
    image: inventory-service:1.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inver_service_db
    ports:
      - "8082:8082"
    depends_on:
      - postgres-inventory
      - discovery-server
      - api-gateway
    networks:
      - microservice

    # Notification-Service Docker Compose Config
  notification-service:
    container_name: notification-service
    #    pull_policy: always
    image: notification-service:1.0-SNAPSHOT
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - zipkin
      - broker
      - discovery-server
      - api-gateway
    networks:
      - microservice
networks:
  microservice:
    name: microservice
    driver: bridge